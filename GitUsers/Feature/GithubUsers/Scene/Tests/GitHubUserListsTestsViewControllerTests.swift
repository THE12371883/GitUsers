//
//  GitHubUserListsTestsViewControllerTests.swift
//  GitUsers
//
//  Created by Teravat Nepiyachat on 8/4/2564 BE.
//  Copyright (c) 2564 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import GitUsers
import XCTest

class GitHubUserListsTestsViewControllerTests: XCTestCase {
	
	var viewController: GitHubUserListsViewController!
	var interactor: MockGitHubUserListsInteractorTests!
	var router: MockGitHubUserListsRouterTests!
	
	override func setUp() {
		interactor = MockGitHubUserListsInteractorTests()
		router = MockGitHubUserListsRouterTests()
		viewController = GitHubUserListsViewController()
		viewController.interactor = interactor
		viewController.router = router
		super.setUp()
	}
	
	override func tearDown() {
		interactor = nil
		router = nil
		viewController = nil
		super.tearDown()
	}
	
	func testViewControllerShouldShowUserList() {
		// given
		let loadingIndicator = UIActivityIndicatorView()
		let searchContainerView = UIView()
		let tableView = UITableView()
		viewController.tableView = tableView
		let viewModel = GetGitHubUsers.ViewModel(githubUsersViewModel: [GitHubUserListsViewModel(item: GitHubUserListsModel())])
		
		// when
		viewController.loadingIndicatorView = loadingIndicator
		viewController.searchBarAndFilterContainerView = searchContainerView
		viewController.tableView = tableView
		viewController.getGithubUsers()
		viewController.show(users: viewModel)
		
		// then
		XCTAssertEqual(interactor.getUsersCalled, 1, "viewController should call interactor get user list")
		XCTAssertNotNil(viewController.models, "viewController should have user data")
	
	}
	
	func testViewControllerShouldShowError() {
		// given
		let loadingIndicator = UIActivityIndicatorView()
		let searchContainerView = UIView()
		let tableView = UITableView()
		let viewModel = ErrorViewModel("")
		
		// when
		viewController.loadingIndicatorView = loadingIndicator
		viewController.searchBarAndFilterContainerView = searchContainerView
		viewController.tableView = tableView
		viewController.show(error: viewModel)
		
		// then
		XCTAssertNil(viewController.models, "viewController can not get user data")
	
	}
	
	func testViewControllerShouldShowSetFavorite() {
		// given
		let viewModel = SetFavoriteUser.ViewModel(index: 0, isFavorite: true)
		
		// when
		viewController.didSelectCell(userId: 0, isSelected: true, index: 0)
		viewController.show(setFavorite: viewModel)
		
		// then
		XCTAssertEqual(interactor.setFavoriteUserCalled, 1, "viewController should interactor set favorite")
	
	}
	
	func testViewControllerShouldShowUserDetail() {
		// given
		let viewModel = SelectedGitHubUser.ViewModel(githubUserModel: GitHubUserListsModel())
		
		// when
		viewController.show(userDetail: viewModel)
		
		// then
		XCTAssertEqual(router.goToDetailCalled, 1, "viewController should router open user detail page")
	
	}
	
	func testViewControllerShouldShowFavoriteActiveFilter() {
		// given
		let loadingIndicator = UIActivityIndicatorView()
		let searchContainerView = UIView()
		let tableView = UITableView()
		let viewModel = SelectedFavoriteFilter.ViewModel(githubUsersViewModel: [GitHubUserListsViewModel(item: GitHubUserListsModel())])
		
		// when
		viewController.loadingIndicatorView = loadingIndicator
		viewController.searchBarAndFilterContainerView = searchContainerView
		viewController.tableView = tableView
		viewController.favoriteFilterDidTapped(isActive: true)
		viewController.show(favoriteFilterActive: viewModel)
		
		// then
		XCTAssertEqual(interactor.selectedFavoriteFilterCalled, 1, "viewController should interactor active favorite filter")
		XCTAssertNil(viewController.models, "viewController can not get user data")
	
	}
	
	func testViewControllerShouldShowSortData() {
		// given
		let loadingIndicator = UIActivityIndicatorView()
		let searchContainerView = UIView()
		let tableView = UITableView()
		let searchAndFilterView = SearchAndFilterView()
		let sortButton = UIButton()
		let viewModel = SelectedSortData.ViewModel(githubUsersViewModel: [GitHubUserListsViewModel(item: GitHubUserListsModel())])
		
		// when
		viewController.loadingIndicatorView = loadingIndicator
		viewController.searchBarAndFilterContainerView = searchContainerView
		viewController.tableView = tableView
		viewController.searchBarAndFilterView = searchAndFilterView
		viewController.searchBarAndFilterView.sortByButton = sortButton
		viewController.sortByDidTapped(sortType: .alphabetAscending)
		viewController.show(sortData: viewModel)
		
		// then
		XCTAssertEqual(interactor.selectedSortCalled, 1, "viewController should interactor sort data")
		XCTAssertNil(viewController.models, "viewController can not get user data")
	
	}
	
	func testViewControllerShouldShowSearchUserData() {
		// given
		let loadingIndicator = UIActivityIndicatorView()
		let searchContainerView = UIView()
		let tableView = UITableView()
		let searchAndFilterView = SearchAndFilterView()
		let sortButton = UIButton()
		let favoriteButton = UIButton()
		let textField = UITextField()
		let viewModel = SearchGithubUser.ViewModel(githubUsersViewModel: [GitHubUserListsViewModel(item: GitHubUserListsModel())])
		
		// when
		viewController.loadingIndicatorView = loadingIndicator
		viewController.searchBarAndFilterContainerView = searchContainerView
		viewController.tableView = tableView
		viewController.searchBarAndFilterView = searchAndFilterView
		viewController.searchBarAndFilterView.sortByButton = sortButton
		viewController.searchBarAndFilterView.favoriteFilterButton = favoriteButton
		viewController.searchBarAndFilterView.textField = textField
		viewController.searchButtonDidTapped(searchText: "mo")
		viewController.show(searchUser: viewModel)
		
		// then
		XCTAssertEqual(interactor.searchUserCalled, 1, "viewController should interactor search user")
		XCTAssertNil(viewController.models, "viewController can not get user data")
	
	}
	
	func testViewControllerShouldShowSearchUserDataTextEmpty() {
		// given
		let loadingIndicator = UIActivityIndicatorView()
		let searchContainerView = UIView()
		let tableView = UITableView()
		let searchAndFilterView = SearchAndFilterView()
		let sortButton = UIButton()
		let favoriteButton = UIButton()
		let textField = UITextField()
		let viewModel = SearchGithubUser.ViewModel(githubUsersViewModel: [GitHubUserListsViewModel(item: GitHubUserListsModel())])
		
		// when
		viewController.loadingIndicatorView = loadingIndicator
		viewController.searchBarAndFilterContainerView = searchContainerView
		viewController.tableView = tableView
		viewController.searchBarAndFilterView = searchAndFilterView
		viewController.searchBarAndFilterView.sortByButton = sortButton
		viewController.searchBarAndFilterView.favoriteFilterButton = favoriteButton
		viewController.searchBarAndFilterView.textField = textField
		viewController.searchButtonDidTapped(searchText: "")
		viewController.show(searchUser: viewModel)
		
		// then
		XCTAssertEqual(interactor.getUsersCalled, 1, "viewController should interactor search user")
		XCTAssertNil(viewController.models, "viewController can not get user data")
	
	}
	
	func testViewControllerShouldShowClearSearchUserData() {
		// given
		let loadingIndicator = UIActivityIndicatorView()
		let searchContainerView = UIView()
		let tableView = UITableView()
		let searchAndFilterView = SearchAndFilterView()
		let sortButton = UIButton()
		let favoriteButton = UIButton()
		let textField = UITextField()
		let viewModel = GetGitHubUsers.ViewModel(githubUsersViewModel: [GitHubUserListsViewModel(item: GitHubUserListsModel())])
		
		// when
		viewController.loadingIndicatorView = loadingIndicator
		viewController.searchBarAndFilterContainerView = searchContainerView
		viewController.tableView = tableView
		viewController.searchBarAndFilterView = searchAndFilterView
		viewController.searchBarAndFilterView.sortByButton = sortButton
		viewController.searchBarAndFilterView.favoriteFilterButton = favoriteButton
		viewController.searchBarAndFilterView.textField = textField
		viewController.clearSearchTextButtonDidTapped()
		viewController.show(users: viewModel)
		
		// then
		XCTAssertEqual(interactor.getUsersCalled, 1, "viewController should call interactor get user list")
		XCTAssertNotNil(viewController.models, "viewController should have user data")
	
	}
}
