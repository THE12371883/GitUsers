//
//  GitHubUserListsTestsWorkerTests.swift
//  GitUsers
//
//  Created by Teravat Nepiyachat on 8/4/2564 BE.
//  Copyright (c) 2564 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import GitUsers
import XCTest

class GitHubUserListsTestsWorkerTests: XCTestCase {
	var worker: GitHubUserListsWorker!
	var githubAPIService: MockGitHubAPIService!
	var realmService: MockRealmService!
	var inMemoryStore: MockGitHubUserListsInMemoryStore!
	
	override func setUp() {
		super.setUp()
		githubAPIService = MockGitHubAPIService()
		realmService = MockRealmService()
		inMemoryStore = MockGitHubUserListsInMemoryStore()
		worker = GitHubUserListsWorker(githubAPIService: githubAPIService,
									   reamlService: realmService,
									   inMemoryStore: inMemoryStore)
	}
	
	override func tearDown() {
		worker = nil
		githubAPIService = nil
		realmService = nil
		inMemoryStore = nil
		super.tearDown()
	}
	
	func testWorkerShouldGetGitHubUsersSuccess() {
		// given
		
		// when
		let expectation = XCTestExpectation(description: "work.getGitHubUsers")
		
		worker.getGitHubUsers { result in
			// then
			XCTAssertNotNil(result, "worker should have github user data")
			if case .success(let githubUserData) = result {
				XCTAssertEqual(githubUserData.count, 1, "worker should have github user data 1 item")
			}
			expectation.fulfill()
		}
		
		wait(for: [expectation], timeout: 1)
	}
	
	func testWorkerShouldGetGitHubUsersFailure() {
		// given
		githubAPIService.getGitHubUsersResultStub = .failure(ServerResponseError(message: "", name: "", status: 0))
		
		// when
		let expectation = XCTestExpectation(description: "work.getGitHubUsers")

		worker.getGitHubUsers { result in
			// then
			if case .failure(let error) = result {
				XCTAssertNotNil(error, "worker should have error")
			}
			expectation.fulfill()
		}
		
		wait(for: [expectation], timeout: 1)
	}
	
	func testWorkerShouldSetFavoriteUser() {
		// given
		let mockId: Int = 45
		
		// when
		let expectation = XCTestExpectation(description: "work.setFavoriteUser")
		
		worker.setFavoriteUser(with: mockId) { result in
			// then
			XCTAssertNotNil(result, "worker should have result")
			XCTAssertEqual(result, true, "worker should have setFavoriteUser success")
			expectation.fulfill()
		}
		
		wait(for: [expectation], timeout: 1)
		
	}
	
	func testWorkerShouldGetGitHubUserItem() {
		// given
		let mockIndex: Int = 0
		
		// when
		inMemoryStore.gitHubUserListsModel = [GitHubUserListsModel(id: 1, loginName: "Teravat", avartarUrlString: "", gitHubUrlString: "", favoriteStatus: false)]
		let expectation = XCTestExpectation(description: "work.getGithubUserDetail")
		
		worker.getGithubUserDetail(at: mockIndex) { result in
			// then
			XCTAssertNotNil(result, "worker should have result")
			expectation.fulfill()
		}
		
		wait(for: [expectation], timeout: 1)
	}
	
	func testWorkerShouldSetFavoriteFilter() {
		// given
		let mockIsActive: Bool = true
		let mockGitUserData = [GitHubUserListsModel(id: 45,
													loginName: "Teravat",
													avartarUrlString: "",
													gitHubUrlString: "",
													favoriteStatus: true),
							   GitHubUserListsModel(id: 94,
													loginName: "Tassamon",
													avartarUrlString: "",
													gitHubUrlString: "",
													favoriteStatus: false)
		]
		
		// when
		inMemoryStore.gitHubUserListsModel = mockGitUserData
		let expectation = XCTestExpectation(description: "work.setFavoriteFilter")
		
		worker.setFavoriteFilter(isActive: mockIsActive) { result in
			// then
			XCTAssertNotNil(result, "worker should have result")
			XCTAssertEqual(result.count, 1, "worker should have result 1 item only favorite user")
			expectation.fulfill()
		}
		
		wait(for: [expectation], timeout: 1)
	}
	
	func testWorkerShouldSetSortAlphabetAscending() {
		// given
		let mockSortType: SortType = .alphabetAscending
		let mockGitUserData = [GitHubUserListsModel(id: 45,
													loginName: "B",
													avartarUrlString: "",
													gitHubUrlString: "",
													favoriteStatus: true),
							   GitHubUserListsModel(id: 94,
													loginName: "A",
													avartarUrlString: "",
													gitHubUrlString: "",
													favoriteStatus: false)
		]
		
		// when
		inMemoryStore.gitHubUserListsModel = mockGitUserData
		let expectation = XCTestExpectation(description: "work.setSort")
		
		worker.setSort(sortType: mockSortType){ result in
			// then
			XCTAssertNotNil(result, "worker should have result")
			XCTAssertEqual(result[0].loginName, "A", "worker should sort result")
			expectation.fulfill()
		}
		
		wait(for: [expectation], timeout: 1)
	}
	
	func testWorkerShouldSetSortAlphabetDescending() {
		// given
		let mockSortType: SortType = .alphabetDescending
		let mockGitUserData = [GitHubUserListsModel(id: 45,
													loginName: "A",
													avartarUrlString: "",
													gitHubUrlString: "",
													favoriteStatus: true),
							   GitHubUserListsModel(id: 94,
													loginName: "B",
													avartarUrlString: "",
													gitHubUrlString: "",
													favoriteStatus: false)
		]
		
		// when
		inMemoryStore.gitHubUserListsModel = mockGitUserData
		let expectation = XCTestExpectation(description: "work.setSort")
		
		worker.setSort(sortType: mockSortType){ result in
			// then
			XCTAssertNotNil(result, "worker should have result")
			XCTAssertEqual(result[0].loginName, "B", "worker should sort result")
			expectation.fulfill()
		}
		
		wait(for: [expectation], timeout: 1)
	}
	
	func testWorkerShouldGetGitHubSearchUsersSuccess() {
		// given
		
		// when
		let expectation = XCTestExpectation(description: "work.getGitHubSearchUsers")
		
		worker.getGitHubSearchUsers(with: "abc") { result in
			// then
			XCTAssertNotNil(result, "worker should have github search user data")
			if case .success(let githubUserData) = result {
				XCTAssertEqual(githubUserData.count, 1, "worker should have github search user data 1 item")
			}
			expectation.fulfill()
		}
		
		wait(for: [expectation], timeout: 1)
	}
	
	func testWorkerShouldGetGitHubSearchUsersFailure() {
		// given
		githubAPIService.getGitHubSearchUsersResultStub = .failure(ServerResponseError(message: "", name: "", status: 0))
		
		// when
		let expectation = XCTestExpectation(description: "work.getGitHubSearchUsers")

		worker.getGitHubSearchUsers(with: "abc") { result in
			// then
			XCTAssertNotNil(result, "worker should have github search user data")
			if case .failure(let error) = result {
				XCTAssertNotNil(error, "worker should have error")
			}
			expectation.fulfill()
		}
		
		wait(for: [expectation], timeout: 1)
	}
}
