//
//  GitHubUserListsTestsInteractorTests.swift
//  GitUsers
//
//  Created by Teravat Nepiyachat on 8/4/2564 BE.
//  Copyright (c) 2564 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import GitUsers
import XCTest

class GitHubUserListsTestsInteractorTests: XCTestCase {
	
	var interactor: GitHubUserListsInteractor!
	var presenter: MockGitHubUserListsPresenterTests!
	var worker: MockGitHubUserListsWorkerTests!
	
	override func setUp() {
		super.setUp()
		
		worker = MockGitHubUserListsWorkerTests()
		presenter = MockGitHubUserListsPresenterTests()
		interactor = GitHubUserListsInteractor(presenter: presenter, worker: worker)
	}
	
	override func tearDown() {
		worker = nil
		presenter = nil
		interactor = nil
		super.tearDown()
	}
	
	func testInteractorShouldGetGitHubUsersSuccess() {
		// given
		let request = GetGitHubUsers.Request()
		
		// when
		worker.getGitHubUsersResultStub = .success([GitHubUserListsModel()])
		interactor.getUsers(request: request)
		
		// then
		XCTAssertEqual(worker.getGitHubUsersCalled, 1, "worker should call get github users")
		XCTAssertEqual(presenter.presentUsersCalled, 1, "interactor should call  present github users")
		XCTAssertEqual(presenter.presentLoadingViewCelled, 2, "interactor should call present loading view 2 times")
	}
	
	func testInteractorShouldGetGitHubUsersFailure() {
		// given
		let request = GetGitHubUsers.Request()
		let mockError = MockServerResponseError(message: "", name: "", status: 0)
		
		// when
		worker.getGitHubUsersResultStub = .failure(mockError)
		interactor.getUsers(request: request)
		
		// then
		XCTAssertEqual(worker.getGitHubUsersCalled, 1, "worker should call get github users")
		XCTAssertEqual(presenter.presentErrorCalled, 1, "interactor should call present error")
		XCTAssertEqual(presenter.presentLoadingViewCelled, 2, "interactor should call present loading view 2 times")
	}
	
	func testInteractorShouldSetFavoriteUser() {
		// given
		let request = SetFavoriteUser.Request(id: 9, index: 1, isFavorite: true)
		
		// when
		worker.setFavoriteUserResultStub = true
		interactor.setFavoriteUser(request: request)
		
		// then
		XCTAssertEqual(worker.setFavoriteUserCalled, 1, "worker should call set favorite users")
		XCTAssertEqual(presenter.presentSetFavoriteCalled, 1, "interactor should call present favorite users")
	}
	
	func testInteractorShouldSelectedGithubUser() {
		// given
		let request = SelectedGitHubUser.Request(index: 99)
		
		// when
		worker.getGithubUserDetailResultStub = GitHubUserListsModel()
		interactor.selectedGithubUser(request: request)
		
		// then
		XCTAssertEqual(worker.getGithubUserDetailCalled, 1, "worker should call get github users detail")
		XCTAssertEqual(presenter.presentUserDetailCalled, 1, "interactor should call present users detail")
	}
	
	func testInteractorShouldSelectedFavoriteFilter() {
		// given
		let request = SelectedFavoriteFilter.Request(isActive: true)
		
		// when
		worker.setFavoriteFilterResultStub = [GitHubUserListsModel()]
		interactor.selectedFavoriteFilter(request: request)
		
		// then
		XCTAssertEqual(worker.setFavoriteFilterCalled, 1, "worker should call set favorite users filter")
		XCTAssertEqual(presenter.presentFavoriteFilterCalled, 1, "interactor should call present favorite users filter")
	}
	
	func testInteractorShouldSetSortData() {
		// given
		let request = SelectedSortData.Request(sortType: .alphabetAscending)
		
		// when
		worker.setSortResultStub = [GitHubUserListsModel()]
		interactor.selectedSort(request: request)
		
		// then
		XCTAssertEqual(worker.setSortCalled, 1, "worker should call set sort users data")
		XCTAssertEqual(presenter.presentSortDataCalled, 1, "interactor should call present sort users data")
	}
	
	func testInteractorShouldSearchGitHubUsersSuccess() {
		// given
		let request = SearchGithubUser.Request(searchText: "mo")
		
		// when
		worker.getGitHubSearchUsersResultStub = .success([GitHubUserListsModel()])
		interactor.searchUser(request: request)
		
		// then
		XCTAssertEqual(worker.getGitHubSearchUsersCalled, 1, "worker should call search github users")
		XCTAssertEqual(presenter.presentSearchUserCalled, 1, "interactor should call  present search github users")
		XCTAssertEqual(presenter.presentLoadingViewCelled, 2, "interactor should call present loading view 2 times")
	}
	
	func testInteractorShouldSearchGitHubUsersFailure() {
		// given
		let request = SearchGithubUser.Request(searchText: "mo")
		let mockError = MockServerResponseError(message: "", name: "", status: 0)
		
		// when
		worker.getGitHubSearchUsersResultStub = .failure(mockError)
		interactor.searchUser(request: request)
		
		// then
		XCTAssertEqual(worker.getGitHubSearchUsersCalled, 1, "worker should call search github users")
		XCTAssertEqual(presenter.presentErrorCalled, 1, "interactor should call present error")
		XCTAssertEqual(presenter.presentLoadingViewCelled, 2, "interactor should call present loading view 2 times")
	}
}
