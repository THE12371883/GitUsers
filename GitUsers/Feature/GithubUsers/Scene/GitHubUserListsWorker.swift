//
//  GitHubUserListsWorker.swift
//  GitUsers
//
//  Created by Teravat Nepiyachat on 5/4/2564 BE.
//  Copyright (c) 2564 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol IGitHubUserListsWorker {
	func getGitHubUsers(completion: @escaping (Result<[IGitHubUserListsModel], Error>) -> Void)
	func setFavoriteUser(with id: Int, completion: @escaping () -> Void)
	func favoriteUserStatus() -> [IGitHubUserListsModel]
}

class GitHubUserListsWorker {
	let githubAPIService: IGitHubAPIService
	let reamlService: IRealmService
	var inMemoryStore: IGitHubUserListsInMemoryStore
	
	init(githubAPIService: IGitHubAPIService,
		 reamlService: IRealmService,
		 inMemoryStore: IGitHubUserListsInMemoryStore) {
		self.githubAPIService = githubAPIService
		self.reamlService = reamlService
		self.inMemoryStore = inMemoryStore
	}
}

// MARK: - IGitHubUserListsWorker

extension GitHubUserListsWorker: IGitHubUserListsWorker {
	func getGitHubUsers(completion: @escaping (Result<[IGitHubUserListsModel], Error>) -> Void) {
		githubAPIService.getGitHubUsers { result in
			switch result {
			case .success(let datas):
				self.inMemoryStore.gitHubUserListsModel = datas
				let models = self.favoriteUserStatus()
				completion(.success(models))
			case .failure(let error):
				completion(.failure(error))
			}
		}
	}
	
	func setFavoriteUser(with id: Int, completion: @escaping () -> Void) {
		reamlService.insertFavoriteUserToRealm(withId: id) {
			completion()
		}
	}
	
	func favoriteUserStatus() -> [IGitHubUserListsModel] {
		for index in 0..<inMemoryStore.gitHubUserListsModel.count {
			reamlService.queryFavoriteUserWithIdFromRealm(withId: inMemoryStore.gitHubUserListsModel[index].id ?? 0) { result in
				self.inMemoryStore.gitHubUserListsModel[index].favoriteStatus = result
			}
		}
		
		return inMemoryStore.gitHubUserListsModel
	}
}
