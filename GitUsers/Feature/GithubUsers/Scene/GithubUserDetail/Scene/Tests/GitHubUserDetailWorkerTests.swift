//
//  GitHubUserDetailWorkerTests.swift
//  GitUsers
//
//  Created by Teravat Nepiyachat on 9/4/2564 BE.
//  Copyright (c) 2564 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import GitUsers
import XCTest

class GitHubUserDetailWorkerTests: XCTestCase {

	var worker: GitHubUserDetailWorker!
	var gitubAPIService: MockGitHubAPIService!
	var inMemoryStore: MockGitHubUserDetailInMemoryStore!
	
	override func setUp() {
		super.setUp()
		inMemoryStore = MockGitHubUserDetailInMemoryStore()
		gitubAPIService = MockGitHubAPIService()
		worker = GitHubUserDetailWorker(inMemoryStore: inMemoryStore, gitHubAPIService: gitubAPIService)
	}
	
	override func tearDown() {
		worker = nil
		inMemoryStore = nil
		gitubAPIService = nil
		super.tearDown()
	}
	
	func testWorkerShouldGetUserProfile() {
		// given
		inMemoryStore.gitHubUserModel = GitHubUserListsModel(id: 99, loginName: "Kaidee", avartarUrlString: "", gitHubUrlString: "", favoriteStatus: true)
		
		// when
		let expectation = XCTestExpectation(description: "worker.getUserProfile")
		
		worker.getUserProfile { result in
			// then
			XCTAssertNotNil(result, "worker should have github user data")
			expectation.fulfill()
		}
		
		wait(for: [expectation], timeout: 1)
	}
	
	func testWorkerShouldGetUserRepositoriesDataSuccess() {
		// given
		inMemoryStore.gitHubUserModel = GitHubUserListsModel(id: 1, loginName: "kaidee", avartarUrlString: "", gitHubUrlString: "", favoriteStatus: false)
		
		// when
		let expectation = XCTestExpectation(description: "work.getUserRepositories")
		
		worker.getUserRepositories { result in
			// then
			XCTAssertNotNil(result, "worker should have repositoriesData user data")
			if case .success(let repositoriesData) = result {
				XCTAssertEqual(repositoriesData.count, 1, "worker should have github repositoriesData user data 1 item")
			}
			expectation.fulfill()
		}
		
		wait(for: [expectation], timeout: 1)
	}
	
	func testWorkerShouldGetUserRepositoriesDataFailure() {
		// given
		inMemoryStore.gitHubUserModel = GitHubUserListsModel(id: 1, loginName: "kaidee", avartarUrlString: "", gitHubUrlString: "", favoriteStatus: false)
		
		gitubAPIService.getGitHubUserRepositoriesResultStub = .failure(MockServerResponseError())
		
		// when
		let expectation = XCTestExpectation(description: "work.getUserRepositories")
		
		worker.getUserRepositories { result in
			// then
			if case .failure(let error) = result {
				XCTAssertNotNil(error, "worker should have error")
			}
			expectation.fulfill()
		}
		
		wait(for: [expectation], timeout: 1)
	}
	
	func testWorkerShouldGetUserRepositoriesDataNoLoginName() {
		// given
		
		// when
		let expectation = XCTestExpectation(description: "work.getUserRepositories")
		
		worker.getUserRepositories { result in
			// then
			XCTAssertNotNil(result, "worker should have repositoriesData user data")
			if case .success(let repositoriesData) = result {
				XCTAssertEqual(repositoriesData.count, 0, "worker should have github repositoriesData user data 0 item")
			}
			expectation.fulfill()
		}
		
		wait(for: [expectation], timeout: 1)
	}
}
