//
//  GitHubUserDetailViewControllerTests.swift
//  GitUsers
//
//  Created by Teravat Nepiyachat on 9/4/2564 BE.
//  Copyright (c) 2564 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import GitUsers
import XCTest

class GitHubUserDetailViewControllerTests: XCTestCase {
	
	var viewController: GitHubUserDetailViewController!
	var interactor: MockGitHubUserDetailInteractorTests!
	
	override func setUp() {
		super.setUp()
		interactor = MockGitHubUserDetailInteractorTests()
		viewController = GitHubUserDetailViewController()
		viewController.interactor = interactor
	}
	
	func testViewControllerShouldShowUserProfileHasImage() {
		// given
		let nameLabel = UILabel()
		let githubUrlLabel = UILabel()
		let imageView = UIImageView()
		let viewModel = GetUserProfile.ViewModel(gitHubUserProfileViewModel: GithubUserProfileViewModel(item: GitHubUserListsModel(id: 0, loginName: "", avartarUrlString: "image", gitHubUrlString: "", favoriteStatus: true)))
		
		// when
		viewController.nameLabel = nameLabel
		viewController.githubUrlLabel = githubUrlLabel
		viewController.imageView = imageView
		viewController.getUserProfile()
		viewController.show(profile: viewModel)
		
		// then
		XCTAssertEqual(interactor.getUserProfileCalled, 1, "viewController should call interactor get user profile")
	}
	
	func testViewControllerShouldShowUserProfileHasNoImage() {
		// given
		let nameLabel = UILabel()
		let githubUrlLabel = UILabel()
		let imageView = UIImageView()
		let viewModel = GetUserProfile.ViewModel(gitHubUserProfileViewModel: GithubUserProfileViewModel(item: GitHubUserListsModel(id: 0, loginName: "", avartarUrlString: nil, gitHubUrlString: "", favoriteStatus: true)))
		
		// when
		viewController.nameLabel = nameLabel
		viewController.githubUrlLabel = githubUrlLabel
		viewController.imageView = imageView
		viewController.getUserProfile()
		viewController.show(profile: viewModel)
		
		// then
		XCTAssertEqual(interactor.getUserProfileCalled, 1, "viewController should call interactor get user profile")
	}
	
	func testViewControllerShouldShowUserRepositoriesList() {
		// given
		let tableView = UITableView()
		let refreshControl = UIRefreshControl()
		let viewModel = GetGitHubUserRepos.ViewModel(gitHubUserReposViewModel: [GithubUserRepositoriesViewModel(item: GithubRepositoriesModel(reposName: "Kaidee", reposDescription: "Career", reposStarCount: 3, reposForkCount: 3, reposLastUpdated: Date()))])
		
		// when
		viewController.tableView = tableView
		viewController.refreshControl = refreshControl
		viewController.getUserRepositories()
		viewController.show(repositories: viewModel)
		
		// then
		XCTAssertEqual(interactor.getUserRepositoriesCalled, 1, "viewController should call interactor get user profile")
		XCTAssertNotNil(viewController.models, "viewController should have user repositories data")
	}
	
	func testViewControllerShouldShowError() {
		// given
		let tableView = UITableView()
		let refreshControl = UIRefreshControl()
		let loadingIndicator = UIActivityIndicatorView()
		let viewModel = ErrorViewModel("")
		
		// when
		viewController.tableView = tableView
		viewController.loadingIndicatorView = loadingIndicator
		viewController.refreshControl = refreshControl
		viewController.getUserRepositories()
		viewController.show(error: viewModel)
		
		// then
		XCTAssertNil(viewController.models, "viewController can not get user repositories data")
	}
	
	func testViewControllerShouldShowLoadingView() {
		// given
		let tableView = UITableView()
		let refreshControl = UIRefreshControl()
		let loadingIndicator = UIActivityIndicatorView()
		let viewModel = ShowLoadingView.ViewModel(isShowLoading: true)
		
		// when
		viewController.tableView = tableView
		viewController.loadingIndicatorView = loadingIndicator
		viewController.refreshControl = refreshControl
		viewController.show(loadingView: viewModel)
		
		// then
		XCTAssertEqual(viewController.loadingIndicatorView.isHidden, false, "viewController should show loading view")
	}
	
	func testViewControllerShouldHideLoadingView() {
		// given
		let tableView = UITableView()
		let refreshControl = UIRefreshControl()
		let loadingIndicator = UIActivityIndicatorView()
		let viewModel = ShowLoadingView.ViewModel(isShowLoading: false)
		
		// when
		viewController.tableView = tableView
		viewController.loadingIndicatorView = loadingIndicator
		viewController.refreshControl = refreshControl
		viewController.show(loadingView: viewModel)
		
		// then
		XCTAssertEqual(viewController.loadingIndicatorView.isHidden, true, "viewController should hide loading view")
	}
}
