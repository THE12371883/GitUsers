//
//  GitHubUserDetailInteractorTests.swift
//  GitUsers
//
//  Created by Teravat Nepiyachat on 9/4/2564 BE.
//  Copyright (c) 2564 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import GitUsers
import XCTest

class GitHubUserDetailInteractorTests: XCTestCase {
	
	var interactor: GitHubUserDetailInteractor!
	var presenter: MockGitHubUserDetailPresenterTests!
	var worker: MockGitHubUserDetailWorkerTests!
	
	override func setUp() {
		super.setUp()
		worker = MockGitHubUserDetailWorkerTests()
		presenter = MockGitHubUserDetailPresenterTests()
		interactor = GitHubUserDetailInteractor(presenter: presenter, worker: worker)
	}
	
	override func tearDown() {
		worker = nil
		presenter = nil
		interactor = nil
		super.tearDown()
	}
	
	func testInteractorShouldGetUserProfile() {
		// given
		let request = GetUserProfile.Request()
		
		// when
		worker.getUserProfileResultStub = GitHubUserListsModel()
		interactor.getUserProfile(request: request)
		
		// then
		XCTAssertEqual(worker.getUserProfileCalled, 1, "worker should call worker get user profile")
		XCTAssertEqual(presenter.presentUserProfileCalled, 1, "interactor should call presenter to present user profile")
		
	}
	
	func testInteractorShouldGetUserRepositoriesDataSuccess() {
		// given
		let request = GetGitHubUserRepos.Request()
		
		// when
		worker.getUserRepositoriesResultStub = .success([GithubRepositoriesModel(reposName: "Kaidee", reposDescription: "Career", reposStarCount: 10, reposForkCount: 10, reposLastUpdated: Date())])
		interactor.getUserRepositories(request: request)
		
		// then
		XCTAssertEqual(worker.getUserRepositoriesCalled, 1, "worker should call worker get user repositories")
		XCTAssertEqual(presenter.presentRepositoriesCalled, 1, "interactor should call presenter to present user repositories")
		XCTAssertEqual(presenter.presentLoadingViewCalled, 2, "interactor should call presenter to present loading view 2 times")
	}
	
	func testInteractorShouldGetUserRepositoriesDataFailure() {
		// given
		let request = GetGitHubUserRepos.Request()
		
		// when
		worker.getUserRepositoriesResultStub = .failure(MockServerResponseError(message: "", name: "", status: 0))
		interactor.getUserRepositories(request: request)
		
		// then
		XCTAssertEqual(worker.getUserRepositoriesCalled, 1, "worker should call worker get user repositories")
		XCTAssertEqual(presenter.presentErrorCalled, 1, "interactor should call presenter to present error")
		XCTAssertEqual(presenter.presentLoadingViewCalled, 2, "interactor should call presenter to present loading view 2 times")
	}
}
