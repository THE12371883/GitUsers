//
//  GitHubUserDetailPresenterTests.swift
//  GitUsers
//
//  Created by Teravat Nepiyachat on 9/4/2564 BE.
//  Copyright (c) 2564 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import GitUsers
import XCTest

class GitHubUserDetailPresenterTests: XCTestCase {
	
	var presenter: GitHubUserDetailPresenter!
	var viewController: MockGitHubUserDetailViewControllerTests!
	
	override func setUp() {
		super.setUp()
		viewController = MockGitHubUserDetailViewControllerTests()
		presenter = GitHubUserDetailPresenter(viewController: viewController)
	}
	
	override func tearDown() {
		viewController = nil
		presenter = nil
		super.tearDown()
	}
	
	func testPresenterShouldGetUserProfile() {
		// given
		let response = GetUserProfile.Response(gitHubUserModel: GitHubUserListsModel())
		
		// when
		presenter.present(userProfile: response)
		
		// then
		XCTAssertEqual(viewController.showProfileCalled, 1, "presenter should call viewController to show user profile")
	}
	
	func testPresenterShouldGetUserRepositories() {
		// given
		let response = GetGitHubUserRepos.Response(gitHubUserReposModel: [GithubRepositoriesModel()])
		
		// when
		presenter.present(repositories: response)
		
		// then
		XCTAssertEqual(viewController.showRepositoriesCalled, 1, "presenter should call viewController to show repositories list")
	}
	
	func testPresenterShouldPresentServerError() {
		// given
		let response = MockServerResponseError(message: "", name: "", status: 99)
		print(response)
		// when
		presenter.present(error: response)
		
		// then
		XCTAssertEqual(viewController.showErrorCalled, 1, "presenter should call viewController show error message")
	}
	
	func testPresenterShouldPresentError() {
		// given
		let response = NSError(domain: "", code: 0, userInfo: ["": ""])
		
		// when
		presenter.present(error: response)
		
		// then
		XCTAssertEqual(viewController.showErrorCalled, 1, "presenter should call viewController show error message")
	}
	
	func testPresenterShouldPresentLoadingView() {
		// given
		let response = ShowLoadingView.Response(isShowLoading: true)
		
		// when
		presenter.present(loadingView: response)
		
		// then
		XCTAssertEqual(viewController.showLoadingViewCalled, 1, "presenter should call viewController show loading view")
	}
}
