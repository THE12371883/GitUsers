//
//  GitHubUserDetailViewController.swift
//  GitUsers
//
//  Created by Teravat Nepiyachat on 7/4/2564 BE.
//  Copyright (c) 2564 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

private enum Constants {
	static let cellIdentifier: String = "cellRepository"
	static let cellNibName: String = "GitHubUserReposTableViewCell"
	static let heightForRow: CGFloat = 100.0
}

protocol GitHubUserDetailDisplayLogic: class {
	func show(profile viewModel: GetUserProfile.ViewModel)
	func show(repositories viewModel: GetGitHubUserRepos.ViewModel)
	func show(error: ErrorViewModel)
}

class GitHubUserDetailViewController: UIViewController {
	
	// MARK: - Assembly
	var interactor: IGitHubUserDetailInteractor!
	var router: IGitHubUserDetailRouter!
	
	// MARK: - IBOutlets
	@IBOutlet weak var imageView: UIImageView!
	@IBOutlet weak var nameLabel: UILabel!
	@IBOutlet weak var githubUrlLabel: UILabel!
	@IBOutlet weak var tableView: UITableView!
	
	// MARK: - Variable
	var models: GetGitHubUserRepos.ViewModel?
	
	// MARK: - Lifecycle
	deinit {
		print("deinit \("GitHubUserDetail")ViewController")
	}
	
	class func newInstance(parameters: [String: Any]?) -> UIViewController {
		let storyboard = UIStoryboard(name: "GitHubUserDetail", bundle: nil)
		if let viewController = storyboard.instantiateViewController(withIdentifier: "GitHubUserDetailViewController") as? GitHubUserDetailViewController {
			
			guard parameters?["userModel"] != nil else {
				return UIViewController()
			}
			
			viewController.setup(parameters: parameters)
			return viewController
		}
		return UIViewController()
	}
	
	override func viewDidLoad() {
		super.viewDidLoad()
		title = "Repositories"
		setupUI()
		setupTableView()
		getUserProfile()
		getUserRepositories()
		setNeedsStatusBarAppearanceUpdate()
	}
	
	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
		
	}
	
	override var preferredStatusBarStyle: UIStatusBarStyle {
		return .default
	}
	
}

// MARK: - Private

private extension GitHubUserDetailViewController {
	
	func setup(parameters: [String: Any]?) {
		let viewController = self
		let inMemoryStore = GitHubUserDetailInMemoryStore()
		if let gitHubUserModel = parameters?["userModel"] as? GitHubUserListsModel {
			inMemoryStore.gitHubUserModel = gitHubUserModel
		}
		let presenter = GitHubUserDetailPresenter(viewController: viewController)
		let worker = GitHubUserDetailWorker(inMemoryStore: inMemoryStore, gitHubAPIService: Singleton.shared.githubAPIService)
		let interactor = GitHubUserDetailInteractor(presenter: presenter, worker: worker)
		let router = GitHubUserDetailRouter()
		viewController.interactor = interactor
		viewController.router = router
	}
	
	func setupUI() {
		
	}
	
	func setupTableView() {
//		refreshControl.addTarget(self, action: #selector(self.refreshData), for: .valueChanged)
//		tableView.refreshControl = refreshControl
//		
		tableView.register(UINib(nibName: Constants.cellNibName, bundle: Bundle.main), forCellReuseIdentifier: Constants.cellIdentifier)
		tableView.delegate = self
		tableView.dataSource = self
		tableView.estimatedRowHeight = Constants.heightForRow
		tableView.tableFooterView = UIView()
		tableView.layoutIfNeeded()
	}
	
	func getUserProfile() {
		interactor.getUserProfile(request: GetUserProfile.Request())
	}
	
	func getUserRepositories() {
		interactor.getUserRepositories(request: GetGitHubUserRepos.Request())
	}
}

// MARK: - GitHubUserDetailDisplayLogic

extension GitHubUserDetailViewController: GitHubUserDetailDisplayLogic {
	func show(profile viewModel: GetUserProfile.ViewModel) {
		nameLabel.text = viewModel.gitHubUserProfileViewModel.loginName
		githubUrlLabel.text = viewModel.gitHubUserProfileViewModel.gitHubUrlString
		
		guard let url = viewModel.gitHubUserProfileViewModel.avartarUrl else {
			imageView.image = UIImage()
			return
		}
		imageView.load(url: url)
	}
	
	func show(repositories viewModel: GetGitHubUserRepos.ViewModel) {
		models = viewModel
		tableView.reloadData()
	}
	
	func show(error: ErrorViewModel) {
		let alert = UIAlertController(title: error.title, message: error.message, preferredStyle: .alert)
		let alertAction = UIAlertAction(title: "OK", style: .default) { _ in
			alert.dismiss(animated: true, completion: nil)
		}
		alert.addAction(alertAction)
		present(alert, animated: true, completion: nil)
	}
}

// MARK: - UITableViewDelegate & UITableViewDataSource

extension GitHubUserDetailViewController: UITableViewDelegate, UITableViewDataSource {
	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		guard let data = models?.gitHubUserReposViewModel else {
			return 0
		}
		
		return data.count
	}
	
	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
		let cell = tableView.dequeueReusableCell(withIdentifier: Constants.cellIdentifier, for: indexPath) as! GitHubUserReposTableViewCell
		
		guard let data = models?.gitHubUserReposViewModel else {
			return UITableViewCell()
		}

		let item = data[indexPath.row]
		let cellModel = GitHubUserReposCellModel(item: item)
		cell.viewModel = cellModel
		
		return cell
	}
	
	func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
		return UITableView.automaticDimension
	}
	
	func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
		tableView.deselectRow(at: indexPath, animated: true)
	}
}
