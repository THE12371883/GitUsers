//
//  GitHubUserListsViewController.swift
//  GitUsers
//
//  Created by Teravat Nepiyachat on 5/4/2564 BE.
//  Copyright (c) 2564 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

private enum Constants {
	static let cellIdentifier: String = "cellGitHubUser"
	static let cellNibName: String = "GitHubUserListsTableViewCell"
	static let heightForRow: CGFloat = 100.0
}

protocol GitHubUserListsDisplayLogic: class {
	func show(users viewModel: GetGitHubUsers.ViewModel)
	func show(error: ErrorViewModel)
	func show(setFavorite viewModel: SetFavoriteUser.ViewModel)
	func show(userDetail viewModel: SelectedGitHubUser.ViewModel)
	func show(loadingView viewModel: ShowLoading.ViewModel)
}

class GitHubUserListsViewController: UIViewController {
	
	// MARK: - Assembly
	var interactor: IGitHubUserListsInteractor!
	var router: IGitHubUserListsRouter!
	
	// MARK: - IBOutlets
	@IBOutlet weak var tableView: UITableView!
	@IBOutlet weak var loadingIndicatorView: UIActivityIndicatorView!
	var refreshControl = UIRefreshControl()
	
	// MARK: - Variable
	var models: GetGitHubUsers.ViewModel?
	
	// MARK: - Lifecycle
	deinit {
		print("deinit \("GitHubUserLists")ViewController")
	}
	
	class func newInstance() -> UIViewController {
		let storyboard = UIStoryboard(name: "GitHubUserLists", bundle: nil)
		if let viewController = storyboard.instantiateViewController(withIdentifier: "GitHubUserListsViewController") as? GitHubUserListsViewController {
			viewController.setup()
			return viewController
		}
		return UIViewController()
	}
	
	// MARK: - Object lifecycle
	
	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
	
	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}
	
	override func viewDidLoad() {
		super.viewDidLoad()
		setupUI()
		setupTableView()
		getGithubUsers()
		navigationController?.navigationBar.prefersLargeTitles = true
		navigationItem.largeTitleDisplayMode = .always
		navigationItem.title = "Github User"
		setNeedsStatusBarAppearanceUpdate()
	}
	
	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
		
	}
	
	override var preferredStatusBarStyle: UIStatusBarStyle {
		return .default
	}
	
}

// MARK: - Private

private extension GitHubUserListsViewController {
	
	func setup() {
		let viewController = self
		let inMemoryStore = GitHubUserListsInMemoryStore()
		let presenter = GitHubUserListsPresenter(viewController: viewController)
		let worker = GitHubUserListsWorker(githubAPIService: Singleton.shared.githubAPIService, reamlService: Singleton.shared.realmService, inMemoryStore: inMemoryStore)
		let interactor = GitHubUserListsInteractor(presenter: presenter, worker: worker)
		let router = GitHubUserListsRouter()
		viewController.interactor = interactor
		viewController.router = router
	}
	
	func setupUI() {
		view.layoutIfNeeded()
		loadingIndicatorView.hidesWhenStopped = true
	}
	
	func setupTableView() {
		refreshControl.addTarget(self, action: #selector(self.refreshData), for: .valueChanged)
		tableView.refreshControl = refreshControl
		
		tableView.register(UINib(nibName: Constants.cellNibName, bundle: Bundle.main), forCellReuseIdentifier: Constants.cellIdentifier)
		tableView.delegate = self
		tableView.dataSource = self
		tableView.tableFooterView = UIView()
		tableView.layoutIfNeeded()
	}
	
	func getGithubUsers() {
		interactor.getUsers(request: GetGitHubUsers.Request())
	}
}

// MARK: - GitHubUserListsDisplayLogic

extension GitHubUserListsViewController: GitHubUserListsDisplayLogic {
	func show(users viewModel: GetGitHubUsers.ViewModel) {
		models = viewModel
		tableView.reloadData()
		refreshControl.endRefreshing()
	}
	
	func show(error: ErrorViewModel) {
		let alert = UIAlertController(title: error.title, message: error.message, preferredStyle: .alert)
		let alertAction = UIAlertAction(title: "OK", style: .default) { _ in
			alert.dismiss(animated: true, completion: nil)
		}
		alert.addAction(alertAction)
		present(alert, animated: true, completion: nil)
	}
	
	func show(setFavorite viewModel: SetFavoriteUser.ViewModel) {
		models?.githubUsersViewModel[viewModel.index].isFavoriteUser = viewModel.isFavorite
	}
	
	func show(userDetail viewModel: SelectedGitHubUser.ViewModel) {
		router.goToDetail(from: self, gitUserModel: viewModel.githubUserModel)
	}
	
	func show(loadingView viewModel: ShowLoading.ViewModel) {
		if viewModel.isShowLoading {
			loadingIndicatorView.startAnimating()
		} else {
			loadingIndicatorView.stopAnimating()
		}
		loadingIndicatorView.isHidden = !viewModel.isShowLoading
	}
}

// MARK: - UITableViewDelegate & UITableViewDataSource

extension GitHubUserListsViewController: UITableViewDelegate, UITableViewDataSource {
	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		guard let data = models?.githubUsersViewModel else {
			return 0
		}
		
		return data.count
	}
	
	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
		let cell = tableView.dequeueReusableCell(withIdentifier: Constants.cellIdentifier, for: indexPath) as! GitHubUserListsTableViewCell
		
		guard let data = models?.githubUsersViewModel else {
			return UITableViewCell()
		}
		
		let item = data[indexPath.row]
		let cellModel = GitHubUserListsCellModel(item: item, rowIndex: indexPath.row)
		cell.viewModel = cellModel
		cell.delegate = self
		
		return cell
	}
	
	func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
		return Constants.heightForRow
	}
	
	func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
		tableView.deselectRow(at: indexPath, animated: true)
		interactor.selectedGithubUser(request: SelectedGitHubUser.Request(index: indexPath.row))
	}
}

// MARK: - IGitHubUserListsCellDelegate

extension GitHubUserListsViewController: IGitHubUserListsCellDelegate {
	func didSelectCell(userId: Int, isSelected: Bool, index: Int) {
		interactor.setFavoriteUser(request: SetFavoriteUser.Request(id: userId, index: index, isFavorite: isSelected))
	}
}

// MARK: - Action

extension GitHubUserListsViewController {
	@objc
	func refreshData() {
		interactor.getUsers(request: GetGitHubUsers.Request())
	}
}
